#!/usr/bin/env python3

"""
Cache class to interact with Redis and store data.
"""

import redis
import uuid
from typing import Union, Callable, Optional
from functools import wraps


def count_calls(method: Callable) -> Callable:
    """
    Decorator that counts the number of times a method is called.

    Args:
        method (Callable): The method to be decorated.

    Returns:
        Callable: The wrapped method with call count functionality.
    """
    @wraps(method)
    def wrapper(self, *args, **kwds):
        key = f"{method.__qualname__}:calls"
        self._redis.incr(key)
        return method(self, *args, **kwds)
    return wrapper


class Cache:
    """
    Cache class that stores data in Redis and counts method calls.
    """
    def __init__(self) -> None:
        """
        Initialize the cache with a Redis instance and flush the database.
        """
        self._redis = redis.Redis()
        self._redis.flushdb()

    @count_calls
    def store(self, data: Union[str, bytes, int, float]) -> str:
        """
        Store data in Redis using a random key generated by uuid4.
        Returns the key as a string.

        Parameters:
        - data: Can be of type str, bytes, int, or float.

        Returns:
        - str: The random key used to store the data.
        """
        rand_key = str(uuid.uuid4())
        self._redis.set(rand_key, data)
        return rand_key

    def get(
            self,
            key: str,
            fn: Optional[Callable[[bytes], Union[str, int, float]]] = None
    ) -> Optional[Union[str, int]]:
        """
        Get the value from Redis using the provided key.
        Optionally apply a function to modify the value.

        Parameters:
        - key (str): The key to retrieve the value.
        - fn (Callable): A callable function to convert the Redis data

        Returns:
        - Optional[Union[str, int]]: The value retrieved
        and optionally converted, or None if key doesn't exist.
        """
        value = self._redis.get(key)
        if value is not None and fn is not None:
            return fn(value)
        return value

    def get_str(self, key: str) -> Optional[str]:
        """
        Get the value as a string from Redis.

        Parameters:
        - key (str): The key to retrieve the value.

        Returns:
        - Optional[str]: The decoded string value.
        """
        return self.get(key, lambda x: x.decode("utf-8"))

    def get_int(self, key: str) -> Optional[int]:
        """
        Get the value as an integer from Redis.

        Parameters:
        - key (str): The key to retrieve the value.

        Returns:
        - int: The integer value.
        """
        return self.get(key, lambda x: int(x))
